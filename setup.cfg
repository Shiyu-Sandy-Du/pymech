[metadata]
name = pymech
author = eX-Mech Developers
author_email = jacopo.canton@gmail.com
description = A Python suite of routines for Nek5000 and Simson.
long_description = file: README.md
long_description_content_type = text/markdown
license =  GNU General Public License v3 or later (GPLv3+)
license_file = LICENSE
url = https://github.com/eX-Mech/pymech
project-urls =
    Bug Tracker = https://github.com/eX-Mech/pymech/issues
    Documentation = https://pymech.readthedocs.io/en/stable
    Changelog = https://pymech.readthedocs.io/en/stable/changelog.html
classifiers =
    Development Status :: 5 - Production/Stable
    Intended Audience :: Science/Research
    License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
    Operating System :: OS Independent
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: Implementation :: CPython
    Programming Language :: Python :: Implementation :: PyPy
    Topic :: Scientific/Engineering

[options]
python_requires = >= 3.7
packages = find:
install_requires =
    numpy
    xarray >= 0.19.0, != 0.20.0, != 0.20.1
    importlib_metadata < 5.0.0 ; python_version < "3.8"
    attrs >= 21.4.0

setup_requires =
    setuptools>=39.2.0
    setuptools_scm

[options.extras_require]
full =
    rich
    dask
    numpy >= 1.18

docs =
    sphinx
    furo
    sphinx-autobuild
    sphinx-copybutton
    sphinx-inline-tabs
    myst-nb
    matplotlib
    asv >= 0.5.1

tests =
    %(full)s
    pytest >= 6.2.5
    pytest-cov >= 3.0.0
    pytest-xdist >= 2.4.0

types =
    typing-extensions
    mypy

dev =
    %(docs)s
    %(tests)s
    %(types)s
    nox
    pre-commit
    pyperf
    virtualenv

[options.entry_points]
xarray.backends =
    pymech = pymech.dataset:PymechXarrayBackend

[flake8]
max-line-length = 88
extend-ignore = W503, E203, E501

[coverage:run]
source = pymech

[coverage:report]
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
	if __name__ == .__main__.:

ignore_errors = True

[tool:pytest]
addopts = "--cov=pymech"

[mypy]
ignore_missing_imports = True
show_error_codes = True
